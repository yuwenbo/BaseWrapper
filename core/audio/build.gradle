if (rootProject.ext.isLibraryModuleAudio) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        if (!rootProject.ext.isLibraryModuleAudio) {
            applicationId "usage.ywb.wrapper"
        }
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        //Arouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath = true
            }
        }

        /**添加多 dex分包支持*/
        multiDexEnabled true
    }


    /*
     * java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，
     * 可以指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除。
     */
    sourceSets {
        main {
            if (rootProject.ext.isLibraryModuleAudio) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //library模式下，排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            } else {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':base:mvp')
    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["recyclerview"]

    implementation rootProject.ext.dependencies["arouter_api"]
    annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
}
